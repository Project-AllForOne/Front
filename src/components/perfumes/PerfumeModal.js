import React from 'react';
import { useState } from 'react';
import styles from '../../css/perfumes/PerfumeModal.module.css';

const PerfumeModal = ({
    show,
    onClose,
    isEditing,
    isDeleting,
    onDelete,
    onDeleteClose,
    formData,
    setFormData,
    imageUrlList = [],
    showUrlInput,
    setShowUrlInput,
    imageUrlCount,
    currentImageIndex,
    onInputChange,
    onImageUrlAdd,
    onImageUrlChange,
    onImageUrlRemove,
    onSubmit,
    setCurrentImageIndex
}) => {
    // ‚úÖ safeImageUrlList Î≥ÄÏàòÎ•º Í∞ÄÏû• Î®ºÏ†Ä ÏÑ†Ïñ∏
    const safeImageUrlList = imageUrlList.length > 0 ? imageUrlList : [''];

    // ‚úÖ imagePreviewÎ•º safeImageUrlListÎ•º Ï∞∏Ï°∞Ìï¥ÏÑú Ï¥àÍ∏∞Ìôî
    const [imagePreview, setImagePreview] = useState(safeImageUrlList[0] || '');
    const [imageError, setImageError] = useState(false);
    
    // Ïù¥ÎØ∏ÏßÄ URL Î≥ÄÍ≤Ω Ìï∏Îì§Îü¨ ÏàòÏ†ï
    const handleImageUrlChange = (index, value) => {
        if (onImageUrlChange) {
            onImageUrlChange(index, value);
        }
        setImagePreview(value);
        setImageError(false);
    };

    if (!show) return null;

    const handleonInputChange = (field, value) => {
        if (!setFormData) {
            console.error("‚ùå `setFormData`Í∞Ä Ï†ïÏùòÎêòÏßÄ ÏïäÏùå!");
            return;
        }
    
        console.log(`üü¢ Î≥ÄÍ≤ΩÎê®: ${field} = ${value}`);
    
        setFormData((prev) => ({
            ...prev,
            [field]: field.includes("List")  // ‚úÖ `List`Í∞Ä Ìè¨Ìï®Îêú Í≤ΩÏö∞ Î∞∞Ïó¥Î°ú Î≥ÄÌôò
                ? value.split(",").map((item) => item.trim())
                : value
        }));
    };
    

    return (
        <div className={styles.modalBackdrop}>
            <div className={styles.modalContainer}>
                <form onSubmit={onSubmit} 
                onKeyDown={(e) => {
                if (e.key === "Enter") {
                e.preventDefault(); 
                    }
                }}>
                    <h2 className={styles.modalTitle}>
                        {isEditing ? 'Ìñ•Ïàò Ïπ¥Îìú ÏàòÏ†ïÌïòÍ∏∞' : 'Ìñ•Ïàò Ïπ¥Îìú Ï∂îÍ∞ÄÌïòÍ∏∞'}
                    </h2>
    
                    <div className={styles.inputRow}>
                        {[
                            { label: 'Ìñ•ÏàòÏòÅÏñ¥Î™Ö', key: 'nameEn', placeholder: 'Ìñ•Ïàò Ïù¥Î¶ÑÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî' },
                            { label: 'Ìñ•ÏàòÌïúÍ∏ÄÎ™Ö', key: 'nameKr', placeholder: 'Ìñ•Ïàò Ïù¥Î¶ÑÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî' },
                            { label: 'Î∏åÎûúÎìúÎ™Ö', key: 'brand', placeholder: 'Î∏åÎûúÎìúÎ™ÖÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî' },
                        ].map(({ label, key, placeholder }) => (
                            <div key={key} className={styles.modalRow}>
                                <label className={styles.formLabel}>{label}</label>
                                <input
                                    type="text"
                                    className={styles.modalRowName}
                                    value={formData[key] || ''}
                                    onChange={(e) => onInputChange(key, e.target.value)}
                                    placeholder={placeholder}
                                    required
                                />
                            </div>
                        ))}
    
                        <div className={styles.modalRow}>
                            <label className={styles.formLabel}>Î∂ÄÌñ•Î•†</label>
                            <select
                                className={styles.modalRowConcentration}
                                value={formData.grade || ''}
                                onChange={(e) => onInputChange('grade', e.target.value)}
                                required
                            >
                                {['Ïò§ Îìú ÌçºÌì∏', 'Ïò§ Îìú ÎöúÏôàÎ†õ', 'Ïò§ Îìú ÏΩîÎ°±', 'ÌçºÌì∏', 'ÏÜîÎ¶¨Îìú ÌçºÌì∏'].map((option) => (
                                    <option key={option} value={option}>{option}</option>
                                ))}
                            </select>
                        </div>
    
                        {[
                            { label: 'Ïã±Í∏ÄÎÖ∏Ìä∏', key: 'singleNoteList', placeholder: 'Ïã±Í∏ÄÎÖ∏Ìä∏Î•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî (Ïòà: ÎùºÎ≤§Îçî, Î∞îÎãêÎùº)' },
                            { label: 'ÌÉëÎÖ∏Ìä∏', key: 'topNoteList', placeholder: 'ÌÉëÎÖ∏Ìä∏Î•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî (Ïòà: Î†àÎ™¨, Î≤†Î•¥Í∞ÄÎ™ª)' },
                            { label: 'ÎØ∏Îì§ÎÖ∏Ìä∏', key: 'middleNoteList', placeholder: 'ÎØ∏Îì§ÎÖ∏Ìä∏Î•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî (Ïòà: Ïû•ÎØ∏, ÏûêÏä§ÎØº)' },
                            { label: 'Î≤†Ïù¥Ïä§ÎÖ∏Ìä∏', key: 'baseNoteList', placeholder: 'Î≤†Ïù¥Ïä§ÎÖ∏Ìä∏Î•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî (Ïòà: ÏÉåÎã¨Ïö∞Îìú, Î®∏Ïä§ÌÅ¨)' },
                        ].map(({ label, key, placeholder }) => (
                            <div key={key} className={styles.modalRow}>
                                <label className={styles.formLabel}>{label}</label>
                                <input
                                    type="text"
                                    className={styles.modalRowName}
                                    value={formData[key] ? formData[key].join(', ') : ''}
                                    onChange={(e) => handleonInputChange(key, e.target.value)}
                                    placeholder={placeholder}
                                />
                            </div>
                        ))}
    
                        {[
                            { label: 'Î©îÏù∏Ïñ¥ÏΩîÎìú', key: 'mainAccord', placeholder: 'Í≥ÑÏó¥ ÏÑ§Î™ÖÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî' },
                            { label: 'ÏÑ±Î∂Ñ', key: 'ingredients', placeholder: 'ÏÑ±Î∂Ñ ÏÑ§Î™ÖÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî' },
                            { label: 'size', key: 'sizeOption', placeholder: 'size ÏÑ§Î™ÖÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî' },
                            { label: 'Ìñ•Ïàò ÏÑ§Î™Ö', key: 'content', placeholder: 'Ìñ•Ïàò ÏÑ§Î™ÖÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî' },
                        ].map(({ label, key, placeholder }) => (
                            <div key={key} className={styles.modalRow}>
                                <label className={styles.formLabel}>{label}</label>
                                <textarea
                                    className={styles.modalRowDescription}
                                    value={formData[key] || ''}
                                    onChange={(e) => onInputChange(key, e.target.value)}
                                    placeholder={placeholder}
                                    required
                                />
                            </div>
                        ))}
    
                        {/* ‚úÖ Ïù¥ÎØ∏ÏßÄ URL ÏûÖÎ†• Î∞è ÎØ∏Î¶¨Î≥¥Í∏∞ */}
                        <div className={styles.modalRow}>
                            <label className={styles.formLabel}>Ïù¥ÎØ∏ÏßÄ</label>
                            <div className={styles.imageInputContainer}>
                                {/* ‚úÖ Ïù¥ÎØ∏ÏßÄ ÎØ∏Î¶¨Î≥¥Í∏∞ */}
                                <div className={styles.imagePreviewBox} onClick={() => setShowUrlInput(true)}>
                                    {imageUrlList.length > 0 ? (
                                        <img
                                            src={imageUrlList[currentImageIndex] || ''}
                                            alt="ÎØ∏Î¶¨Î≥¥Í∏∞"
                                            className={styles.previewImage}
                                            onError={(e) => {
                                                e.target.src = 'https://mblogthumb-phinf.pstatic.net/MjAyMDA1MDZfMTk3/MDAxNTg4Nzc1MjcwMTQ2.l8lHrUz8ZfSDCShKbMs8RzQj37B3jxpwRnQK7byS9k4g.OORSv5IlMThMSNj20nz7_OYBzSTkxwnV9QGGV8a3tVkg.JPEG.herbsecret/essential-oils-2738555_1920.jpg?type=w800';
                                            }}
                                        />
                                    ) : (
                                        <span>+</span>
                                    )}
                                </div>
    
                                {/* ‚úÖ URL ÏûÖÎ†• ÌïÑÎìú */}
                                <input
                                    type="text"
                                    value={imageUrlList[currentImageIndex] || ''}
                                    onChange={(e) => handleImageUrlChange(currentImageIndex, e.target.value)}
                                    placeholder="Ïù¥ÎØ∏ÏßÄ URLÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî"
                                    className={styles.modalRowImageUrl}
                                    onKeyDown={(e) => {
                                        if (e.key === "Enter") {
                                            e.preventDefault(); // ‚úÖ Í∏∞Î≥∏ Ìèº Ï†úÏ∂ú Î∞©ÏßÄ
                                            setShowUrlInput(false); // ‚úÖ ÏûÖÎ†•Ï∞Ω Îã´Í∏∞
                                        }
                                    }}
                                />
    
                                {/* ‚úÖ URL Ï∂îÍ∞Ä Î≤ÑÌäº */}
                                <button type="button" onClick={onImageUrlAdd} className={styles.addImageButton}>
                                    +
                                </button>
                            </div>
                        </div>
    
                        {/* ‚úÖ Ïù¥ÎØ∏ÏßÄ ÌéòÏù¥Ïßï (Ïù¥Ï†Ñ/Îã§Ïùå Î≤ÑÌäº Ï∂îÍ∞Ä) */}
                        <div className={styles.imagePagination}>
                            <button
                                type="button"
                                disabled={currentImageIndex === 0}
                                onClick={() => setCurrentImageIndex((prev) => Math.max(prev - 1, 0))}
                                className={styles.paginationArrow}
                            >
                                ‚óÄ
                            </button>
    
                            {imageUrlList.map((_, index) => (
                                <span
                                    key={index}
                                    className={`${styles.paginationDot} ${index === currentImageIndex ? styles.activeDot : ''}`}
                                    onClick={() => {
                                        if (typeof setCurrentImageIndex === 'function') {
                                            setCurrentImageIndex(index);
                                        } else {
                                            console.error('‚ùå setCurrentImageIndex is not a function:', setCurrentImageIndex);
                                        }
                                    }}
                                    tabIndex={0} 
                                    onKeyDown={(e) => {
                                        if (e.key === "Enter") {
                                            e.preventDefault(); 
                                            setShowUrlInput(false);  
                                        }
                                    }}
                                />
                            ))}
    
                            <button
                                type="button"
                                disabled={currentImageIndex === imageUrlList.length - 1}
                                onClick={() => setCurrentImageIndex((prev) => Math.min(prev + 1, imageUrlList.length - 1))}
                                className={styles.paginationArrow}
                            >
                                ‚ñ∂
                            </button>
                        </div>
                    </div>
    
                    <div className={styles.modalActions}>
                        <button type="submit" className={styles.saveButton}>Ï†ÄÏû•</button>
                        <button type="button" onClick={onClose} className={styles.cancelButton}>Ï∑®ÏÜå</button>
                    </div>
                </form>
            </div>
        </div>
    );    
};    

export default PerfumeModal;
